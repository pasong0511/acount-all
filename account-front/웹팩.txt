모듈 번들러 (웹팩)

모듈 시스템 -> 파일의 개수가 많아짐
파일을 일일이 다운 받으면 통신비용이 많이 들어감
번들링 : 여러 파일들을 묶어줌
웹팩(번들러)가 번들링을 수행

package.json 기본 형성 (npm init -y)

lodash 설치 (번들에 포함)
웹팩 설치 npm install webpack-cli --save-dev (웹팩은 런타임에서 돌아가지 않음)
npx webpack : calc, index, lodash 번들링


웹팩 설정 파일도 가능


모듈간의 싱호 의존 관계를 디펜던시 그래프라고 함
entry point는 여러 개일 수도 있음 (서로 엔트리에 대해서 독립적으로 번들이 됨)

output filename 옵션

name : 청크 이름
id : 웹팩 내부 모듈 id
hash : 빌드 고유 해시값
chunkhash : 모듈 내용 기준 해시 (파일 내용 기준 해시) ** 중요 ** 내용이 변경되었다면 캐시 갱신

사용 이유 : 브라우저가 자동 캐시 (재요청시 캐시파일을 사용하고 다운을 새로 받지 않음)
            캐시를 갱신하기 위해 사용


로더
웹팩이 웹 어플리케이션을 해석할 때 자바스크립트 파일이 아닌(비코드 파일) 웹 자원들을 변환할 수 있도록 도와주는 속성
파일들을 import / export로 명시해주어야함
파일 산출물을 자동으로 만들어 등록해줌

css loader의 필요 이유
import "./button1.css" 구문을 사용할 수 있게 해줌

두 로더를 설치해야함 (npm install style-loader css-loader --save-dev)
css-loader : 웹팩에서 css 파일을 불러올 수 있도록 해주는 loader
style-loader : css-loader를 이용해 가져온 css값을 <style> 태그로 넣어주는 loader

플러그인
웹팩의 기본적인 동작에 추가적인 기능을 제공하는 속성
로더가 끝나고 수행

모드 
웹팩에 내장된 최적화 기능 사용 가능
production(기본값) : 배포모드
development : 개발모드
none : 최적화 없음

typescript 로더 설치
npm install typescript ts-loader --save-dev

빌드시 html 생성
npm install html-webpack-plugin --save-dev

node modules에 있는 코드들은 분리시키는 것이 좋음

트리쉐이킹
사용되지 않는 코드를 번들링 과정에서 제외

개발 환경
웹팩은 라이브서버 기능도 가능
npm install webpack-dev-server --save-dev (개발 서버)
파일 수정이 되면 바로 반영
npx webpack serve (빌드하며 화면 띄움)